<jqa:jqassistant-rules xmlns:jqa="http://www.buschmais.com/jqassistant/core/analysis/rules/schema/v1.0">

    <concept id="osgi-bundle:Bundle">
        <description>Labels all artifacts with a manifest declaring a bundle name as OSGI and BUNDLE.</description>
        <cypher><![CDATA[
            MATCH
              (bundle:ARTIFACT)-[:CONTAINS]->(manifest:MANIFEST:FILE),
              (manifest)-[DECLARES]->(section:MANIFESTSECTION),
              (section)-[:HAS]->(nameEntry:MANIFESTENTRY),
              (section)-[:HAS]->(versionEntry:MANIFESTENTRY)
            WHERE
              nameEntry.NAME = "Bundle-SymbolicName"
              AND versionEntry.NAME = "Bundle-Version"
            SET
              bundle:OSGI:BUNDLE,
              bundle.BUNDLESYMBOLICNAME = nameEntry.VALUE,
              bundle.BUNDLEVERSION = versionEntry.VALUE
            RETURN
              bundle.NAME, bundle.BUNDLESYMBOLICNAME, bundle.BUNDLEVERSION
        ]]></cypher>
    </concept>

    <concept id="osgi-bundle:ExportPackage">
        <requiresConcept refId="osgi-bundle:Bundle"/>
        <description>Creates an EXPORTS relation from a bundle artifact to all packages which are declared as "Export-Package" in the bundle manifest.
        </description>
        <cypher><![CDATA[
            match
             (bundle:OSGI:BUNDLE)-[:CONTAINS]->(package:PACKAGE)
            with
              bundle, package, "(^|.*,)\\s*"+ replace(package.FQN, ".", "\\.")+"\\s*((;|,).*|$)" as pattern
            match
              (bundle)-[:CONTAINS]->(manifest:FILE:MANIFEST),
              (manifest)-[:DECLARES]->(section:MANIFESTSECTION),
              (section)-[:HAS]->(entry:MANIFESTENTRY)
            where
              entry.NAME = "Export-Package"
              AND entry.VALUE =~ pattern
            create unique
              (bundle)-[:EXPORTS]->(package)
            return
              bundle as Bundle, collect(package) as ExportedPackages
        ]]></cypher>
    </concept>

    <concept id="osgi-bundle:ImportPackage">
        <requiresConcept refId="osgi-bundle:Bundle"/>
        <description>Creates an IMPORTS relation from a bundle artifact to all packages which are declared as "Import-Package" in the bundle manifest.
        </description>
        <cypher><![CDATA[
            match
             (package:PACKAGE)
            with
              package, "(^|.*,)\\s*"+ replace(package.FQN, ".", "\\.")+"\\s*((;|,).*|$)" as pattern
            match
              (bundle:OSGI:BUNDLE)-[:CONTAINS]->(manifest:FILE:MANIFEST),
              (manifest)-[:DECLARES]->(section:MANIFESTSECTION),
              (section)-[:HAS]->(entry:MANIFESTENTRY)
            where
              entry.NAME = "Import-Package"
              and entry.VALUE =~ pattern
            create unique
              (bundle)-[:IMPORTS]->(package)
            return
              bundle as Bundle, collect(package) as ImportedPackages
        ]]></cypher>
    </concept>

    <concept id="osgi-bundle:Activator">
        <requiresConcept refId="osgi-bundle:Bundle"/>
        <description>Creates an ACTIVATES relation between a class and the bundle artifact if the class is declared as "Bundle-Activator" in the bundle
            manifest.
        </description>
        <cypher><![CDATA[
            match
              (bundle:OSGI:BUNDLE)-[:CONTAINS]->(manifest:FILE:MANIFEST),
              (manifest)-[:DECLARES]->(section:MANIFESTSECTION),
              (section)-[:HAS]->(entry:MANIFESTENTRY),
              (bundle:OSGI:BUNDLE)-[:CONTAINS]->(activator:CLASS)
            where
              entry.NAME = "Bundle-Activator"
              and entry.VALUE = activator.FQN
            create unique
              (activator)-[:ACTIVATES]->(bundle)
            return
              activator as Activator, bundle as Bundle
        ]]></cypher>
    </concept>

    <concept id="osgi-bundle:InternalType">
        <requiresConcept refId="osgi-bundle:ExportPackage"/>
        <description>Labels all internal types (i.e. which are neither located in an exported package as INTERNAL.</description>
        <cypher><![CDATA[
            match
              (bundle:BUNDLE:OSGI)-[:CONTAINS]->(internalPackage:PACKAGE),
              (bundle)-[:CONTAINS]->(internalType:TYPE),
              (internalPackage)-[:CONTAINS]->(internalType:TYPE)
            where not
                (bundle)-[:EXPORTS]->(internalPackage)
            set
              internalType:INTERNAL
            return bundle, collect(internalType)
        ]]></cypher>
    </concept>

    <constraint id="osgi-bundle:UnusedInternalType">
        <requiresConcept refId="dependency:Type"/>
        <requiresConcept refId="osgi-bundle:InternalType"/>
        <requiresConcept refId="osgi-bundle:Activator"/>
        <description>A bundle must not contain internal types which are not used by other types in the bundle.</description>
        <cypher><![CDATA[
            match
              (bundle:OSGI:BUNDLE)-[:CONTAINS]->(internalType:TYPE:INTERNAL)
            where not (
                (internalType)-[:ACTIVATES]->(bundle)
              or
                (bundle)-[:CONTAINS]->(:TYPE)-[:DEPENDS_ON]->(internalType)
            )
            return
              bundle as Bundle, internalType as InternalType
        ]]></cypher>
    </constraint>

    <constraint id="osgi-bundle:InternalTypeMustNotBePublic">
        <requiresConcept refId="dependency:Type"/>
        <requiresConcept refId="osgi-bundle:InternalType"/>
        <requiresConcept refId="osgi-bundle:Activator"/>
        <description>Internal types must not be public if no depending types exist in other packages of the bundle.</description>
        <cypher><![CDATA[
            match
              (bundle:OSGI:BUNDLE)-[:CONTAINS]->(internalType:TYPE:INTERNAL),
              (internalPackage:PACKAGE)-[:CONTAINS]->(internalType)
            optional match
              (bundle)-[:CONTAINS]->(otherPackage:PACKAGE),
              (otherPackage)-[:CONTAINS]->()-[:DEPENDS_ON]->(internalType)
            where
              internalType:PUBLIC
            with
              bundle, internalPackage, internalType, collect(otherPackage) as otherPackages
            where
              all(otherPackage in otherPackages where internalPackage = otherPackage)
              and not
                (internalType)-[:ACTIVATES]->(bundle)
            return
              bundle as Bundle, internalType as InternalType
        ]]></cypher>
    </constraint>

</jqa:jqassistant-rules>